#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;
use Faker\Factory;

require dirname(__DIR__) . '/vendor/autoload.php';

$input = new ArgvInput();
$faker = Factory::create();

$ordersCount = $input->getParameterOption(['--ordersCount', '-o'], 200);
$paymentsCount = $input->getParameterOption(['--paymentsCount', '-p'], 400);
$consumersCount = $input->getParameterOption(['--consumersCount', '-c'], 100);

$outputDir = $input->getParameterOption(['--target', '-t'], dirname(__DIR__));

$outputFiles = [
    'consumer' => "{$outputDir}/consumer-dump.sql",
    'order' => "{$outputDir}/order-dump.sql",
    'payment' => "{$outputDir}/payment-dump.sql",
];

foreach ($outputFiles as $srv => $file) {
    file_put_contents($file, '');
}

$templates = [
    'consumer' => sprintf(
        'INSERT INTO %s (%s) VALUES (%s);' . PHP_EOL,
        'consumer',
        '`id`, `first_name`, `last_name`, `email`, `password`',
        "'%s', '%s', %d, '%s', '%s'"
    ),
    'address' => sprintf(
        'INSERT INTO %s (%s) VALUES (%s);' . PHP_EOL,
        'addresses',
        '`id`, `consumer_id`, `street`, `city`, `state`, `country`',
        "'%s', '%s', %d, '%s', '%s', '%s'"
    ),
    'order' => sprintf(
        'INSERT INTO %s (%s) VALUES (%s);' . PHP_EOL,
        'orders',
        '`id`, `order_date`, `amount`, `basket`, `consumer_id`, `address_id`',
        "'%s', '%s', %d, '%s', '%s', '%s'"
    ),
    'payment' => sprintf(
        'INSERT INTO %s (%s) VALUES (%s);' . PHP_EOL,
        'payments',
        '`id`, `order_id`, `amount`, `date`, `descriptions`, `iban`, `bank_name`',
        "'%s', '%s', %d, '%s', '%s', '%s', '%s'"
    ),
];

$tempDB = new PDO(
    'sqlite::memory:', // 'sqlite:' . __DIR__ . '/temp.db', // 'sqlite::memory:',
    null,
    null,
    [PDO::ATTR_PERSISTENT => true]
);

$tempDbInit = [
    "DROP TABLE IF EXISTS temp_consumers",
    "DROP TABLE IF EXISTS temp_orders",
    "CREATE TABLE IF NOT EXISTS temp_consumers (consumer_id TEXT, address_id TEXT)",
    "CREATE TABLE IF NOT EXISTS temp_orders (order_id TEXT)",
];

foreach ($tempDbInit as $statement) {
    $tempDB->exec($statement);
}

for ($i=0; $i < $consumersCount; $i++) {
    $consumerId = $faker->uuid;
    $addressCount = rand(0, 45) % 5 === 0 ? 2 : 1;

    $insertConsumerStatement = sprintf(
        $templates['consumer'],
        $consumerId,
        $faker->firstName,
        $faker->lastName,
        $faker->email,
        password_hash('password', PASSWORD_BCRYPT)
    );
    file_put_contents($outputFiles['consumer'], $insertConsumerStatement, FILE_APPEND);

    for ($j=0; $j < $addressCount; $j++) {
        $addressId = $faker->uuid;
        
        $insertAddressStatement = sprintf(
            $templates['address'],
            $addressId,
            $consumerId,
            $faker->streetAddress,
            $faker->city,
            '',
            $faker->countryCode
        );
        file_put_contents($outputFiles['consumer'], $insertAddressStatement, FILE_APPEND);
        $statement = $tempDB->prepare(
            'INSERT INTO temp_consumers (`consumer_id`, `address_id`) VALUES (:c, :a)'
        );
        $statement->bindValue(':c', $consumerId);
        $statement->bindValue(':a', $addressId);
        $statement->execute();

        echo "Consumer stored: $consumerId / $addressId" . PHP_EOL;
    }
}

for ($i=0; $i < $ordersCount; $i++) {
    $randomConsumer = $tempDB
        ->query('SELECT * FROM temp_consumers ORDER BY random() LIMIT 1')
        ->fetch(PDO::FETCH_ASSOC);

    $orderId = $faker->uuid;

    $insertOrderStatement = sprintf(
        $templates['order'],
        $orderId,
        ($faker->dateTimeThisDecade)->format('Y-m-d h:m:i'),
        $faker->randomFloat(2, 0.9, 499.99),
        '[]',
        $randomConsumer['consumer_id'],
        $randomConsumer['address_id']
    );

    file_put_contents($outputFiles['order'], $insertOrderStatement, FILE_APPEND);
    
    $statement = $tempDB->prepare(
        'INSERT INTO temp_orders (`order_id`) VALUES (:o)'
    );
    $statement->bindValue(':o', $orderId);
    $statement->execute();

    echo "Order stored: $orderId" . PHP_EOL;
}


for ($i=0; $i < $paymentsCount; $i++) {
    $randomOrder = $tempDB
        ->query('SELECT * FROM temp_orders ORDER BY random() LIMIT 1')
        ->fetch(PDO::FETCH_ASSOC);

    $paymentId = $faker->uuid;

    $insertPaymentStatement = sprintf(
        $templates['payment'],
        $paymentId,
        $randomOrder['order_id'],
        (float)$faker->numerify("###.##"),
        ($faker->dateTimeThisDecade)->format('Y-m-d h:m:i'),
        '',
        $faker->iban,
        $faker->name
    );

    file_put_contents($outputFiles['payment'], $insertPaymentStatement, FILE_APPEND);
    echo "Payment stored: $paymentId" . PHP_EOL;
}

$tempDB = null;
